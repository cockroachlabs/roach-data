/*
 * This file is generated by jOOQ.
 */
package io.roach.data.jooq.model.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import io.roach.data.jooq.model.Keys;
import io.roach.data.jooq.model.Public;
import io.roach.data.jooq.model.tables.records.AccountRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Account extends TableImpl<AccountRecord> {

    /**
     * The reference instance of <code>public.account</code>
     */
    public static final Account ACCOUNT = new Account();

    private static final long serialVersionUID = 1360958769;

    /**
     * The column <code>public.account.id</code>.
     */
    public final TableField<AccountRecord, Long> ID = createField(DSL.name("id"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                    .defaultValue(org.jooq.impl.DSL.field("unique_rowid()", org.jooq.impl.SQLDataType.BIGINT)), this,
            "");

    /**
     * The column <code>public.account.balance</code>.
     */
    public final TableField<AccountRecord, BigDecimal> BALANCE = createField(DSL.name("balance"),
            org.jooq.impl.SQLDataType.NUMERIC(19, 2).nullable(false), this, "");

    /**
     * The column <code>public.account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField(DSL.name("name"),
            org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.account.type</code>.
     */
    public final TableField<AccountRecord, String> TYPE = createField(DSL.name("type"),
            org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * Create a <code>public.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.PRIMARY);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, BigDecimal, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
